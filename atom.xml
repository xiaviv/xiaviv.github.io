<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CoderWei</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-25T03:14:36.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CoderWei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>My first hexo blog</title>
    <link href="http://yoursite.com/2017/09/22/My-first-hexo-blog/"/>
    <id>http://yoursite.com/2017/09/22/My-first-hexo-blog/</id>
    <published>2017-09-22T15:14:47.000Z</published>
    <updated>2017-09-25T03:14:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>牛刀小试 ，test …</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;牛刀小试 ，test …&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/09/22/hello-world/"/>
    <id>http://yoursite.com/2017/09/22/hello-world/</id>
    <published>2017-09-22T07:27:06.000Z</published>
    <updated>2017-09-22T07:27:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android组件化URL之肆意跳转</title>
    <link href="http://yoursite.com/2017/09/15/Android%E7%BB%84%E4%BB%B6%E5%8C%96URL%E4%B9%8B%E8%82%86%E6%84%8F%E8%B7%B3%E8%BD%AC/"/>
    <id>http://yoursite.com/2017/09/15/Android组件化URL之肆意跳转/</id>
    <published>2017-09-15T04:08:10.000Z</published>
    <updated>2017-09-25T04:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>#####本文为大家介绍利用 URL Scheme 在应用内任意跳转的实现，通过本地配置文件配置打开你想要打开的任意页面. <strong><em>抛弃传统的 Manifest 中 <intent-filter> 配置.</intent-filter></em></strong><br><strong><em>首先介绍下什么是 URL Scheme ？</em></strong></p><blockquote><p>URL Scheme 可以通过类似打开网页的方式去通过路由打开一个 Activity，其协议格式和我们打开网页输入的网址类似。</p></blockquote><p><strong><em>URL Scheme 的格式</em></strong></p><blockquote><p>一个完整的完整的 URL Scheme 协议格式由 Scheme、Host、Port、Path 和 Query 组成，其结构如下所示：</p><p><scheme>://<host>:<port>/<path></path>?<query></query></port></host></scheme></p></blockquote><p><strong><em>来个栗子：</em></strong>  </p><blockquote><p>internal://card:8080/cardDetail?id=001</p></blockquote><table><thead><tr><th style="text-align:left">结构</th><th style="text-align:center">对应栗子</th></tr></thead><tbody><tr><td style="text-align:left">Scheme (协议名称)</td><td style="text-align:center">internal</td></tr><tr><td style="text-align:left">Host (主机)</td><td style="text-align:center">card</td></tr><tr><td style="text-align:left">Port (端口)</td><td style="text-align:center">8080</td></tr><tr><td style="text-align:left">Path (路径)</td><td style="text-align:center">cardDetail</td></tr><tr><td style="text-align:left">Query (需要传递的参数)</td><td style="text-align:center">id</td></tr></tbody></table><p><strong><em>URL Scheme应用场景</em></strong></p><blockquote><p>通过指定的 URL 字段，可以让应用在被调起后直接打开某些特定页面，比如商品详情页、活动详情页等等。也可以执行某些指定动作，如完成支付等。也可以在应用内通过 H5 来直接调用显示 App 内的某个页面。综上URL Scheme 使用场景大致分以下几种：</p><ul><li>服务器下发跳转路径，客户端根据服务器下发跳转路径跳转相应的页面</li><li>H5 页面点击锚点，根据锚点具体跳转路径APP端跳转具体的页面</li><li>APP 端收到服务器端下发的 Push 通知栏消息，根据消息的点击跳转路径跳转相关页面</li></ul></blockquote><p>#####刚说了抛弃 Manifest 中 <intent-filter> 配置的方式来更加灵活的实现，原因有以下两点：</intent-filter></p><ul><li>在 Manifest 中配置不安全，APP 被逆向后很容易暴露你的配置.</li><li>如果你 APP 中有多个需要通过 Scheme 来打开的页面那么你就要配置很多个 Activity.</li></ul><p><strong><em>好了介绍这么多，步入正题，首先看下类图和流程图</em></strong></p><p><img src="http://upload-images.jianshu.io/upload_images/1891780-f491b3dc3610a35d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="类图.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/1891780-6c9fb380fad9d27a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流程图.png"></p><p>###方法说明：</p><ul><li><p>OpenUrlManager：（外部调用类）<br><strong><em>方法：</em></strong><br>openURL: 将外部传入的URL塞给 OpenUrlContextFactory 工厂(调用<br>contextWithURL 方法)，用以创建对应的 OpenUrlContext.</p><ul><li>OpenUrlContextFactory：（生成 OpenUrlContext 的工厂类）<br><strong><em>属性：</em></strong><br>从本地配置文件中读取一个 Scheme、界面类(可选)和 OpenUrlContext 之间的对应关系.</li></ul></li><li><p>OpenUrlContext: 控制每个 URL 跳转页面逻辑的上下文类的基类.<br><strong><em>方法：</em></strong><br>contextWithURL：根据传入的 URL，从以上对应关系中找到对应的<br><strong><em>属性：</em></strong><br>url: 对应跳转的 URL<br>UIClassName:一个可选的跳转到的 UI 类名.（对于 OpenUrlContext 基类来说，跳转逻辑是直接跳转到 UIClassName 对应的 UI；对于其他上下文子类来说，具体逻辑可以单独控制.）<br>urlParams: 从 URL 属性中解析出来的 URL参数.</p></li><li><p>OpenUrlContext 子类并创建对象，将 URL 和可选的 UI 类名传过去.<br><strong><em>方法：</em></strong><br>parseParams：从 URL 中解析出来 URL 参数。<br>verifyParams: 验证一些公共 URL 参数是否合法。<br>startContext: 调用以上两个方法先做 URL 解析和参数验证，之后调用 jump 方法做跳转逻辑.<br>jump: 跳转逻辑.</p></li><li><p>WebOpenUrlContext: 控制网页url跳转页面逻辑的上下文子类<br><strong><em>属性：</em></strong><br>webviewConfig: 针对网页界面定制化需求的自定义配置数据.<br><strong><em>方法：</em></strong><br>verifyParams: 网页地址特有参数的校验逻辑<br>jump: 做一般的本地界面跳转（这里可以做一些特殊的本地逻辑，根据不同条件做不同的跳转）<br>verifyParams: 不同本地 URL 的特有参数的校验逻辑</p></li></ul><p><strong><em>接下来我们看代码：</em></strong><br>    所有的 URL 都通过这个 Manager 来打开，APP 里大部分页面可能需要登录才能查看，有的则不需要，比如说一个静态的 html 等.是否需要登录这个参数 (needLogin) 我们可以通过URL拿到，如果需要登录并且此刻用户还未登录，那么直接启动登录界面，后续让用户登录以后自行打开想要打开的页面。</p><pre><code>public class OpenUrlManager {private static final String TAG = &quot;OpenUrlManager&quot;;public static final String NATIVE_SCHEME_CONFIG = &quot;openurl.json&quot;;public static final String NATIVE_SCHEME = &quot;internal&quot;;public static void openUrl(String url, Context context) {    OpenUrlContext openUrlContext = OpenUrlContextFactory.contextWithURL(url);    if (openUrlContext != null) {        if (openUrlContext.needLogin &amp;&amp; TextUtils.isEmpty(Util.getToke())) {            // TODO: 2017/9/15 需要登录            // LoginManager.getInstance().launchLoginActivity(context);            Log.e(TAG, &quot;openUrl: 需要登录&quot;);        } else {            openUrlContext.startContext(context);        }    }  }}</code></pre><p>接下来我们看 OpenUrlContextFactory.contextWithURL 这个方法</p><pre><code>public static OpenUrlContext contextWithURL(String url) {    try {        Uri uri = Uri.parse(url);        Log.e(&quot;OpenUrlContextFactory &quot;, &quot;contextWithURL:path  &quot; + uri.getPath());        switch (uri.getScheme()) {            case &quot;http&quot;:            case &quot;https&quot;:                return new WebOpenUrlContext(url);            case OpenUrlManager.NATIVE_SCHEME:                if (schemeMap == null) {                    AssetManager assetManager = App.getInstance().getAssets();                    InputStream is = assetManager.open(OpenUrlManager.NATIVE_SCHEME_CONFIG);                    BufferedReader br = new BufferedReader(new InputStreamReader(is));                    StringBuilder stringBuilder = new StringBuilder();                    String str;                    while ((str = br.readLine()) != null) {                        stringBuilder.append(str);                    }                    schemeMap = new JSONObject(stringBuilder.toString());                }                if (schemeMap.has(uri.getHost())) {                    JSONObject schemeObject = schemeMap.getJSONObject(uri.getHost());                    Class openUrlContextClass = Class.forName(schemeObject.getString(&quot;openUrlContext&quot;));                    Constructor constructor = openUrlContextClass.getConstructor(String.class, Class.class, boolean.class);                    return (OpenUrlContext) constructor.newInstance(url, Class.forName(schemeObject.getString(&quot;uiClass&quot;)), schemeObject.getBoolean(&quot;needLogin&quot;));                }                return null;            default:                return null;        }    } catch (Exception e) {        e.printStackTrace();        return null;    }}</code></pre><p>在这里通过 URL 获取 Scheme 判断，如果是 http 或 https 那么直接打开H5 页面，如果是你定义的要跳转到 Native 页面的 Scheme，那么获取 URL 中的 Host，读取本地配置文件中的 Json 串，根据 Json 串中的 key 匹配Host，然后获取到 Native 页面的类名通过反射传给 OpenUrlContext 的子类。（本地存储放在了 assets 文件夹下，当然你也可以使用别的存储方式）。看下JSON 数据：</p><pre><code>{  &quot;recharge&quot;:{  &quot;needLogin&quot;:true,  &quot;uiClass&quot;:&quot;com.xiawe_i.openurl.activity.RechargeActivity&quot;,  &quot;openUrlContext&quot;:&quot;com.xiawe_i.openurl.openurl.OpenUrlContext&quot;},&quot;orderDetail&quot;:{  &quot;needLogin&quot;:true,  &quot;uiClass&quot;:&quot;com.xiawe_i.openurl.activity.OrderDetailActivity&quot;,  &quot;openUrlContext&quot;:&quot;com.xiawe_i.openurl.openurl.OpenUrlContext&quot;},&quot;cardList&quot;:{  &quot;needLogin&quot;:true,  &quot;uiClass&quot;:&quot;com.xiawe_i.openurl.activity.CardListActivity&quot;,  &quot;openUrlContext&quot;:&quot;com.xiawe_i.openurl.openurl.OpenUrlContext&quot;},  &quot;voucherList&quot;:{  &quot;needLogin&quot;:true,  &quot;uiClass&quot;:&quot;com.xiawe_i.openurl.activity.VoucherListActivity&quot;,  &quot;openUrlContext&quot;:&quot;com.xiawe_i.openurl.openurl.OpenUrlContext&quot; }}</code></pre><p><strong><em>接下来看OpenUrlContext</em></strong></p><pre><code>public OpenUrlContext(String url, Class uiClass, boolean needLogin) {    this.url = url;    this.uiClass = uiClass;    this.needLogin = needLogin;    parseParams();}protected void startContext(Context context) {    if (verifyParams()) {        buildIntent(context);        jump(context);    } else {        Log.e(TAG, url);    }}protected void parseParams() {    urlParams = new HashMap&lt;&gt;();    Uri uri = Uri.parse(url);    for (String key : uri.getQueryParameterNames()) {        urlParams.put(key, uri.getQueryParameter(key));        if (key.equals(NEEDSLOGIN_PARAMS)) {            if (uri.getQueryParameter(key).equals(&quot;1&quot;)) {                needLogin = true;            } else if (uri.getQueryParameter(key).equals(&quot;0&quot;)) {                needLogin = false;            }        }    }}protected boolean verifyParams() {    return true;}protected void buildIntent(Context context) {    intent = new Intent(context, uiClass);    Bundle bundle = new Bundle();    for (Map.Entry&lt;String, String&gt; entry : urlParams.entrySet()) {        bundle.putString(entry.getKey(), entry.getValue());    }    intent.putExtra(OPENURL_PARAMS_KEY, bundle);}protected void jump(Context context) {    context.startActivity(intent);}</code></pre><p>这里就三个方法，解析 URL 里的参数，做校验，通过 Bundle 对象传给要启动的 Native 页面。</p><p><strong><em>看下我的 Demo 模拟启动</em></strong></p><p><img src="http://upload-images.jianshu.io/upload_images/1891780-9172b7cebe697ba0.gif?imageMogr2/auto-orient/strip" alt="效果.gif"></p><p><a href="">完整 Demo 地址 ：https://github.com/xiaviv/OpenUrlManger</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#####本文为大家介绍利用 URL Scheme 在应用内任意跳转的实现，通过本地配置文件配置打开你想要打开的任意页面. &lt;strong&gt;&lt;em&gt;抛弃传统的 Manifest 中 &lt;intent-filter&gt; 配置.&lt;/intent-filter&gt;&lt;/em&gt;&lt;/stro
      
    
    </summary>
    
    
  </entry>
  
</feed>
